#!/bin/python3

import sys
import os
import subprocess
dir = os.path.dirname(os.path.abspath(__file__))+"/now"
nowt = dir+"/now.t"
docdir = dir+"/books/"

def updateQueue():
    '''
    Erases first book on the Queue
    '''
    with open(nowt, 'r') as fin:
        data = fin.read().splitlines(True)
    with open(nowt, 'w') as fout:
        fout.writelines(data[1:])

def lastLine(currentFile):
    '''
    Checks last line on notes, then. If find --FIM-- calls updateQueue()
    '''
    try:
        with open(docdir+currentFile+'.fim', 'r') as f:
            try:
                last_line = f.readlines()[-1]
            except IndexError as nope:
                last_line = ''
        if "--FIM--" in last_line:
            updateQueue()
    except FileNotFoundError:
        pass

def openBook(): 
    '''
    Checks filetype and opens it with proper app
    Opens notes with vim
    calls lastLine when vim is closed
    '''
    currentFile = openQueue()[0]
    if currentFile == '':
        raise FileNotFoundError("Empty Queue")
    ext = currentFile[currentFile.rfind('.'):]
    print(currentFile)
    if ext=='.chm' or ext=='.mobi' or ext == '.epub':
        #TODO: Subprocess for epr when .epub
        #TODO: websites support
        output = subprocess.Popen(["fbreader '"+docdir+currentFile+"'"], shell=True, stdout=None, stderr=None, preexec_fn=os.setpgrp )
    if ext=='.pdf':
        output = subprocess.Popen(["okular '"+docdir+currentFile+"'"], shell=True, stdout=None, stderr=None, preexec_fn=os.setpgrp )
    if  'https://' in currentFile:
        output = subprocess.Popen(["mpv '"+currentFile+"'"], shell=True, stdout=None, stderr=None, preexec_fn=os.setpgrp )
        currentFile = currentFile[1+currentFile.rfind('/'):]
        print(currentFile)
    subprocess.run(['vim', docdir+currentFile+'.fim'])
    lastLine(currentFile)


def editQueue(): 
    '''
    Edits Queue with vim
    '''
    subprocess.run(['vim', nowt])

def openQueue():
    '''
    Opens queue. If doesn't exist, creates it
    '''
    try:
        return open(nowt).read().split('\n')
    except FileNotFoundError:
        subprocess.run(['touch',nowt])
        return open(nowt).read().split('\n')

def addFile(book,baseBook):
    '''
    Copies book file to now folder and creates notes file
    '''
    cp_process = subprocess.run(['cp',book, docdir+baseBook],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            universal_newlines=True)
    touch_process = subprocess.run(['touch',book, docdir+baseBook+'.fim'],
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            universal_newlines=True)
    if cp_process.stderr != '':
        raise Exception(cp_process.stderr)
    if touch_process.stderr :
        raise Exception(touch_process.stderr)

    
def writeQueue(book):
    '''
    Adds new book to queue file
    '''
    fout = open(nowt, 'a')
    fout.write(book+'\n')
    fout.close()


def addBook(book):
    '''
    Checks filetype, if accepted calls addFile and writeQueue
    '''
    baseBook = book[book.rfind('/')+1:]
    ext = book[book.rfind('.'):]
    acceptable = ('.chm','.epub','.mobi','.pdf')
    isfile = os.path.isfile(book) 
    if isfile and ext in acceptable:
        queue = openQueue()
        if baseBook in queue: print('Already in queue')
        else: 
            addFile(book,baseBook)
            writeQueue(baseBook)
            print('added book')
    elif not isfile:
        if 'https://' in book:
            videoQueue()
            writeQueue(book)
            print('added url')
        else:
            print('File doesn\'t exist')
    else:
        print('Invalide extension')

def test(n=0):
    '''
    manages test files
    '''
    if n == 0:
        fileNumber = len(os.listdir(dir+'/tests'))+1
    elif n<0:
        fileNumber = len(os.listdir(dir+'/tests'))+1+n
    else:
        fileNumber = n
    fileName = 'test'+str(fileNumber)+'.py'
    subprocess.run(['vim', dir+'/tests/'+fileName])




def secondQueue():
    '''
    changes to second Queue
    '''
    global nowt
    nowt = dir+"/now2.t"

def videoQueue():
    '''
    changes to second Queue
    '''
    global nowt
    nowt = dir+"/now.v"

def argsHandler(args):
    '''
    Manages queues
    '''
    if '-s' in args:
        '''Access second queue'''
        secondQueue()
        args.remove('-s')
    if '-v' in args:
        '''Access video queue'''
        videoQueue()
        args.remove('-v')
    lenargs = len(args)
    if lenargs == 0:
        '''opens first book on the queue'''
        openBook()
    elif args[0] == '-q':
        '''opens queue on vim'''
        editQueue()
    elif args[0] == '-h':
        help()
    elif args[0] == '-t':
        '''opens .py files for code experimentation
        Giving an int will select an specific .py file
        negative int will start from the last file
        files will be stored on the ./test/ folder'''
        if lenargs > 1:
            test(int(args[1]))
        else:
            test()
    else:
        '''Adds book queue'''
        addBook(args[0])

def help():
    print('''    No Argument  - Opens first book on queue
    -s           - Access second queue
    -q           - Edit queue with vim
    -t           - Opens .py files for code experimentation
                   Giving an int will select an specific .py file
                   negative int will start from the last file
                   files will be stored on the ./test/ folder
    -h           - Help
    ''')
def main():
    argsHandler(sys.argv[1:])

if __name__ == '__main__':
    main()

